// #Grid
//
//

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin m-make-grid-columns {
    $list: "";
    $i: 1;
    $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
    @for $i from 1 + 1 through $grid-columns {
        $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
    }
    #{$list} {
        position: relative;
        // Prevent columns from collapsing when empty
        min-height: 1px;
    }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin m-float-grid-columns($class) {
    $list: "";
    $i: 1;
    $list: ".col-#{$class}-#{$i}";
    @for $i from 1 + 1 through $grid-columns {
        $list: "#{$list}, .col-#{$class}-#{$i}";
    }
    #{$list} {
        float: left;
    }
}

@mixin m-calc-grid-column($index, $class, $type) {
    @if $type == width and $index > 0 {
        .col-#{$class}-#{$index} {
            width: percentage($index / $grid-columns);
        }
    }
    @if $type == push and $index > 0 {
        .col-#{$class}-push-#{$index} {
            left: percentage($index / $grid-columns);
        }
    }
    @if $type == push and $index == 0 {
        .col-#{$class}-push-0 {
            left: auto;
        }
    }
    @if $type == pull and $index > 0 {
        .col-#{$class}-pull-#{$index} {
            right: percentage($index / $grid-columns);
        }
    }
    @if $type == pull and $index == 0 {
        .col-#{$class}-pull-0 {
            right: auto;
        }
    }
    @if $type == offset {
        .col-#{$class}-offset-#{$index} {
            margin-left: percentage($index / $grid-columns);
        }
    }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin m-loop-grid-columns($columns, $class, $type) {
    @for $i from 0 through $columns {
        @include m-calc-grid-column($i, $class, $type);
    }
}

// Create grid for specific class
@mixin m-make-grid($class) {
    @include m-float-grid-columns($class);
    @include m-loop-grid-columns($grid-columns, $class, width);
    @include m-loop-grid-columns($grid-columns, $class, pull);
    @include m-loop-grid-columns($grid-columns, $class, push);
    @include m-loop-grid-columns($grid-columns, $class, offset);
}

// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
@mixin m-container-fixed {
    margin-right: auto;
    margin-left: auto;
    @include m-clearfix;
}

// Generate the extra small columns
@mixin m-make-xs-column($columns) {
    position: relative;
    float: left;
    width: percentage($columns / $grid-columns);
    min-height: 1px;
}

// Generate the small columns
@mixin m-make-sm-column($columns) {
    position: relative;
    min-height: 1px;
    @media (min-width: $screen-tablet-min) {
        float: left;
        width: percentage($columns / $grid-columns);
    }
}